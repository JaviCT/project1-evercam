{
  "_from": "google-cloud",
  "_id": "google-cloud@0.57.0",
  "_inBundle": false,
  "_integrity": "sha1-r+wKoY7K5TnBotJVVtcM152H3+U=",
  "_location": "/google-cloud",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "google-cloud",
    "fetchSpec": "latest",
    "name": "google-cloud",
    "raw": "google-cloud",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/google-cloud/-/google-cloud-0.57.0.tgz",
  "_shasum": "afec0aa18ecae539c1a2d25556d70cd79d87dfe5",
  "_spec": "google-cloud",
  "_where": "C:\\xampp\\htdocs\\proyect1",
  "author": {
    "name": "Google Inc."
  },
  "bugs": {
    "url": "https://github.com/googlecloudplatform/google-cloud-node/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Burcu Dogan",
      "email": "jbd@google.com"
    },
    {
      "name": "Jason Dobry",
      "email": "jason.dobry@gmail.com"
    },
    {
      "name": "Johan Euphrosine",
      "email": "proppy@google.com"
    },
    {
      "name": "Patrick Costello",
      "email": "pcostell@google.com"
    },
    {
      "name": "Ryan Seys",
      "email": "ryan@ryanseys.com"
    },
    {
      "name": "Silvano Luciani",
      "email": "silvano@google.com"
    },
    {
      "name": "Stephen Sawchuk",
      "email": "sawchuk@gmail.com"
    }
  ],
  "dependencies": {
    "@google-cloud/bigquery": "^0.9.0",
    "@google-cloud/bigtable": "^0.10.0",
    "@google-cloud/compute": "^0.8.0",
    "@google-cloud/datastore": "^1.0.0",
    "@google-cloud/dlp": "^0.1.0",
    "@google-cloud/dns": "^0.6.0",
    "@google-cloud/firestore": "^0.8.0",
    "@google-cloud/language": "^0.12.1",
    "@google-cloud/logging": "^1.0.0",
    "@google-cloud/monitoring": "^0.3.0",
    "@google-cloud/prediction": "^0.6.0",
    "@google-cloud/pubsub": "^0.14.3",
    "@google-cloud/resource": "^0.7.0",
    "@google-cloud/spanner": "^0.7.1",
    "@google-cloud/speech": "^0.10.3",
    "@google-cloud/storage": "^1.0.0",
    "@google-cloud/translate": "^1.0.0",
    "@google-cloud/video-intelligence": "^0.3.2",
    "@google-cloud/vision": "^0.12.0",
    "extend": "^3.0.0"
  },
  "deprecated": false,
  "description": "Cloud APIs Client Library for Node.js",
  "devDependencies": {
    "mocha": "^3.1.0",
    "proxyquire": "^1.7.10"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "files": [
    "AUTHORS",
    "CONTRIBUTORS",
    "LICENSE",
    "npm-shrinkwrap.json",
    "src"
  ],
  "homepage": "https://github.com/googlecloudplatform/google-cloud-node#readme",
  "keywords": [
    "app engine",
    "appengine",
    "big query",
    "bigquery",
    "cloud",
    "cloud datastore",
    "cloud dlp",
    "cloud dns",
    "cloud firestore",
    "cloud logging",
    "cloud pub/sub",
    "cloud pubsub",
    "cloud resource manager",
    "cloud spanner",
    "cloud speech",
    "cloud storage",
    "cloud video intelligence",
    "cloud vision",
    "compute engine",
    "computeengine",
    "datastore",
    "dlp",
    "dns",
    "firestore",
    "gae",
    "gce",
    "gcs",
    "google",
    "google api",
    "google api client",
    "google apis",
    "google apis client",
    "google app engine",
    "google appengine",
    "google big query",
    "google bigquery",
    "google cloud",
    "google cloud datastore",
    "google cloud dlp",
    "google cloud dns",
    "google cloud firestore",
    "google cloud logging",
    "google cloud platform",
    "google cloud pub/sub",
    "google cloud pubsub",
    "google cloud resource manager",
    "google cloud spanner",
    "google cloud speech",
    "google cloud storage",
    "google cloud video intelligence",
    "google cloud vision",
    "google compute engine",
    "google prediction",
    "google translate",
    "logging",
    "prediction",
    "pub/sub",
    "pubsub",
    "resource manager",
    "spanner",
    "speech",
    "translate",
    "video intelligence",
    "vision"
  ],
  "license": "Apache-2.0",
  "main": "./src/index.js",
  "name": "google-cloud",
  "optionalDependencies": {},
  "readme": "# Cloud Node.js Client\n> Node.js idiomatic client for [Google Cloud Platform](https://cloud.google.com/) services.\n\n[![NPM Version](https://img.shields.io/npm/v/google-cloud.svg)](https://www.npmjs.org/package/google-cloud)\n[![CircleCI](https://circleci.com/gh/GoogleCloudPlatform/google-cloud-node/tree/master.svg?style=shield)](https://circleci.com/gh/GoogleCloudPlatform/google-cloud-node/tree/master)\n[![Appveyor Build Status](https://ci.appveyor.com/api/projects/status/github/GoogleCloudPlatform/google-cloud-node?svg=true)](https://ci.appveyor.com/project/GoogleCloudPlatform/google-cloud-node)\n[![Coverage Status](https://img.shields.io/coveralls/GoogleCloudPlatform/google-cloud-node.svg)](https://coveralls.io/r/GoogleCloudPlatform/google-cloud-node?branch=master)\n\n* [Homepage][gcloud-homepage]\n* [API Documentation][gcloud-docs]\n\nThis client supports the following Google Cloud Platform services at a [General Availability (GA)](#versioning) quality level:\n\n* [Cloud Datastore](#cloud-datastore-ga) (GA)\n* [Cloud Storage](http://github.com/googleapis/nodejs-storage/) (GA)\n* [Cloud Translation API](#cloud-translation-api-ga) (GA)\n* [Google Stackdriver Logging](#google-stackdriver-logging-ga) (GA)\n\nThis client supports the following Google Cloud Platform services at a [Beta](#versioning) quality level:\n\n* [Cloud Firestore](#cloud-firestore-beta) (Beta)\n* [Cloud Natural Language](#cloud-natural-language-beta) (Beta)\n* [Cloud Pub/Sub](#cloud-pubsub-beta) (Beta)\n* [Cloud Spanner](#cloud-spanner-beta) (Beta)\n* [Cloud Vision](#cloud-vision-beta) (Beta)\n* [Google BigQuery](#google-bigquery-beta) (Beta)\n* [Google Stackdriver Monitoring](#google-stackdriver-monitoring-beta) (Beta)\n\nThis client supports the following Google Cloud Platform services at an [Alpha](#versioning) quality level:\n\n* [Cloud Bigtable](#cloud-bigtable-alpha) (Alpha)\n* [Cloud DNS](#cloud-dns-alpha) (Alpha)\n* [Cloud Resource Manager](#cloud-resource-manager-alpha) (Alpha)\n* [Cloud Speech](#cloud-speech-alpha) (Alpha)\n* [Google Compute Engine](#google-compute-engine-alpha) (Alpha)\n* [Google Prediction API](#google-prediction-api-alpha) (Alpha)\n* [Google Stackdriver Debugger](#google-stackdriver-debugger-alpha) (Alpha)\n* [Google Stackdriver Error Reporting](#google-stackdriver-error-reporting-alpha) (Alpha)\n* [Google Stackdriver Trace](#google-stackdriver-trace-alpha) (Alpha)\n\nIf you need support for other Google APIs, check out the [Google Node.js API Client library][googleapis].\n\n\n## Quick Start\n\nWe recommend installing the individual packages that you need, which are provided under the `@google-cloud` namespace. For example:\n\n```sh\n$ npm install --save @google-cloud/datastore\n$ npm install --save @google-cloud/storage\n```\n```js\nvar config = {\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n};\n\nvar datastore = require('@google-cloud/datastore')(config);\nvar storage = require('@google-cloud/storage')(config);\n```\n\n#### The google-cloud meta-package\n\nWe also provide a meta-package, `google-cloud`, which provides all of the individual APIs. However, in order to keep file size and memory use low, the use of this package is not recommended.\n\nIf you want the kitchen sink, however, get it with:\n\n```sh\n$ npm install --save google-cloud\n```\n```js\nvar gcloud = require('google-cloud')({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar datastore = gcloud.datastore();\nvar storage = gcloud.storage();\n```\n\n\n## Example Applications\n\n- [nodejs-getting-started][nodejs-getting-started] - A sample and [tutorial][nodejs-getting-started-tutorial] that demonstrates how to build a complete web application using Cloud Datastore, Cloud Storage, and Cloud Pub/Sub and deploy it to Google App Engine or Google Compute Engine.\n- [gcloud-node-todos][gcloud-todos] - A TodoMVC backend using google-cloud-node and Datastore.\n- [gitnpm][gitnpm] - Easily lookup an npm package's GitHub repo using google-cloud-node and Google App Engine.\n- [gcloud-kvstore][gcloud-kvstore] - Use Datastore as a simple key-value store.\n- [hya-wave][hya-wave] - Cloud-based web sample editor. Part of the [hya-io][hya-io] family of products.\n- [gstore-node][gstore-node] - Google Datastore Entities Modeling library.\n- [gstore-api][gstore-api] - REST API builder for Google Datastore Entities.\n\n\n## Authentication\n\nWith `google-cloud` it's incredibly easy to get authenticated and start using Google's APIs. You can set your credentials on a global basis as well as on a per-API basis. See each individual API section below to see how you can auth on a per-API-basis. This is useful if you want to use different accounts for different Cloud services.\n\n### On Google Cloud Platform\n\nIf you are running this client on Google Cloud Platform, we handle authentication for you with no configuration. You just need to make sure that when you [set up the GCE instance][gce-how-to], you add the correct scopes for the APIs you want to access.\n\n``` js\nvar storage = require('@google-cloud/storage')();\n\n// If you're using the google-cloud meta-package:\nvar gcloud = require('google-cloud');\nvar storage = gcloud.storage();\n\n// ...you're good to go! See the next section to get started using the APIs.\n```\n\n\n### Elsewhere\n\nIf you are not running this client on Google Cloud Platform, you need a Google Developers service account. To create a service account:\n\n1. Visit the [Google Developers Console][dev-console].\n2. Create a new project or click on an existing project.\n3. Navigate to  **APIs & auth** > **APIs section** and turn on the following APIs (you may need to enable billing in order to use these services):\n  * BigQuery API\n  * Cloud Bigtable API\n  * Cloud Bigtable Admin API\n  * Cloud Bigtable Table Admin API\n  * Cloud Spanner API\n  * Google Cloud Datastore API\n  * Google Cloud DNS API\n  * Google Cloud Firestore API\n  * Google Cloud Natural Language API\n  * Google Cloud Pub/Sub API\n  * Google Cloud Resource Manager API\n  * Google Cloud Speech API\n  * Google Cloud Storage\n  * Google Cloud Storage JSON API\n  * Google Cloud Translation API\n  * Google Cloud Vision API\n  * Google Compute Engine API\n  * Prediction API\n  * Stackdriver Logging API\n4. Navigate to **APIs & auth** >  **Credentials** and then:\n  * If you want to use a new service account key, click on **Create credentials** and select **Service account key**. After the account key is created, you will be prompted to download the JSON key file that the library uses to authenticate your requests.\n  * If you want to generate a new service account key for an existing service account, click on **Generate new JSON key** and download the JSON key file.\n\n``` js\n// Authenticating on a global basis.\nvar projectId = process.env.GCLOUD_PROJECT; // E.g. 'grape-spaceship-123'\n\nvar gcloud = require('google-cloud')({\n  projectId: projectId,\n\n  // The path to your key file:\n  keyFilename: '/path/to/keyfile.json'\n\n  // Or the contents of the key file:\n  credentials: require('./path/to/keyfile.json')\n\n  // For any APIs that accept an API key:\n  key: '...'\n});\n\n// ...you're good to go! See the next section to get started using the APIs.\n```\n\nYou can also set auth on a per-API-instance basis. The examples below show you how.\n\n\n## Cloud Datastore (GA)\n\n- [API Documentation][gcloud-datastore-docs]\n- [Official Documentation][cloud-datastore-docs]\n\n*Follow the [activation instructions][cloud-datastore-activation] to use the Cloud Datastore API with your project.*\n\n#### Using the Cloud Datastore API module\n\n```\n$ npm install --save @google-cloud/datastore\n```\n\n```js\nvar datastore = require('@google-cloud/datastore');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar datastoreClient = datastore({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar key = datastoreClient.key(['Product', 'Computer']);\n\ndatastoreClient.get(key, function(err, entity) {\n  console.log(err || entity);\n});\n\n// Save data to Datastore.\nvar blogPostData = {\n  title: 'How to make the perfect homemade pasta',\n  author: 'Andrew Chilton',\n  isDraft: true\n};\n\nvar blogPostKey = datastoreClient.key('BlogPost');\n\ndatastoreClient.save({\n  key: blogPostKey,\n  data: blogPostData\n}, function(err) {\n  // `blogPostKey` has been updated with an ID so you can do more operations\n  // with it, such as an update.\n  blogPostData.isDraft = false;\n\n  datastoreClient.save({\n    key: blogPostKey,\n    data: blogPostData\n  }, function(err) {\n    if (!err) {\n      // The blog post is now published!\n    }\n  });\n});\n```\n\n\n## Cloud Storage (GA)\n\n- [API Documentation][gcloud-storage-docs]\n- [Official Documentation][cloud-storage-docs]\n\n#### Using the Cloud Storage API module\n\n```\n$ npm install --save @google-cloud/storage\n```\n\n```js\nvar storage = require('@google-cloud/storage');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar fs = require('fs');\n\nvar gcs = storage({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Create a new bucket.\ngcs.createBucket('my-new-bucket', function(err, bucket) {\n  if (!err) {\n    // \"my-new-bucket\" was successfully created.\n  }\n});\n\n// Reference an existing bucket.\nvar bucket = gcs.bucket('my-existing-bucket');\n\n// Upload a local file to a new file to be created in your bucket.\nbucket.upload('/photos/zoo/zebra.jpg', function(err, file) {\n  if (!err) {\n    // \"zebra.jpg\" is now in your bucket.\n  }\n});\n\n// Download a file from your bucket.\nbucket.file('giraffe.jpg').download({\n  destination: '/photos/zoo/giraffe.jpg'\n}, function(err) {});\n\n// Streams are also supported for reading and writing files.\nvar remoteReadStream = bucket.file('giraffe.jpg').createReadStream();\nvar localWriteStream = fs.createWriteStream('/photos/zoo/giraffe.jpg');\nremoteReadStream.pipe(localWriteStream);\n\nvar localReadStream = fs.createReadStream('/photos/zoo/zebra.jpg');\nvar remoteWriteStream = bucket.file('zebra.jpg').createWriteStream();\nlocalReadStream.pipe(remoteWriteStream);\n```\n\n\n## Cloud Translation API (GA)\n\n- [API Documentation][gcloud-translate-docs]\n- [Official Documentation][cloud-translate-docs]\n\n#### Using the Google Translate API module\n\n```\n$ npm install --save @google-cloud/translate\n```\n\n```js\nvar translate = require('@google-cloud/translate');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar translateClient = translate({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Translate a string of text.\ntranslateClient.translate('Hello', 'es', function(err, translation) {\n  if (!err) {\n    // translation = 'Hola'\n  }\n});\n\n// Detect a language from a string of text.\ntranslateClient.detect('Hello', function(err, results) {\n  if (!err) {\n    // results = {\n    //   language: 'en',\n    //   confidence: 1,\n    //   input: 'Hello'\n    // }\n  }\n});\n\n// Get a list of supported languages.\ntranslateClient.getLanguages(function(err, languages) {\n  if (!err) {\n    // languages = [\n    //   'af',\n    //   'ar',\n    //   'az',\n    //   ...\n    // ]\n  }\n});\n```\n\n\n## Google Stackdriver Logging (GA)\n\n- [API Documentation][gcloud-logging-docs]\n- [Official Documentation][cloud-logging-docs]\n\n#### Using the Google Stackdriver Logging API module\n\n```\n$ npm install --save @google-cloud/logging\n```\n\n```js\nvar logging = require('@google-cloud/logging');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar loggingClient = logging({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Create a sink using a Bucket as a destination.\nvar gcs = storage();\n\nloggingClient.createSink('my-new-sink', {\n  destination: gcs.bucket('my-sink')\n}, function(err, sink) {});\n\n// Write a critical entry to a log.\nvar syslog = loggingClient.log('syslog');\n\nvar metadata = {\n  resource: {\n    type: 'gce_instance',\n    labels: {\n      zone: 'global',\n      instance_id: '3'\n    }\n  }\n};\n\nvar entry = syslog.entry(metadata, {\n  delegate: process.env.user\n});\n\nsyslog.critical(entry, function(err) {});\n\n// Get all entries in your project.\nloggingClient.getEntries(function(err, entries) {\n  if (!err) {\n    // `entries` contains all of the entries from the logs in your project.\n  }\n});\n```\n\n\n## Cloud Firestore (Beta)\n\n- [API Documentation][gcloud-firestore-docs]\n- [Official Documentation][cloud-firestore-docs]\n\n#### Using the Cloud Firestore API module\n\n```\n$ npm install --save @google-cloud/firestore\n```\n\n```js\nconst Firestore = require('@google-cloud/firestore');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nconst firestore = new Firestore({\n  projectId: 'YOUR_PROJECT_ID',\n  keyFilename: '/path/to/keyfile.json',\n});\n\nconst document = firestore.doc('posts/intro-to-firestore');\n\n// Enter new data into the document.\ndocument.set({\n  title: 'Welcome to Firestore',\n  body: 'Hello World',\n}).then(() => {\n  // Document created successfully.\n});\n\n// Update an existing document.\ndocument.update({\n  body: 'My first Firestore app',\n}).then(() => {\n  // Document updated successfully.\n});\n\n// Read the document.\ndocument.get().then(doc => {\n  // Document read successfully.\n});\n\n// Delete the document.\ndocument.delete().then(() => {\n  // Document deleted successfully.\n});\n```\n\n\n## Cloud Natural Language (Beta)\n\n- [API Documentation][gcloud-language-docs]\n- [Official Documentation][cloud-language-docs]\n\n#### Using the Natural Language API module\n\n```\n$ npm install --save @google-cloud/language\n```\n\n```js\nvar language = require('@google-cloud/language');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar languageClient = language({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar content = 'Hello, world!';\nvar type = language.v1.types.Document.Type.PLAIN_TEXT;\nvar document = {\n    content : content,\n    type : type\n};\nlanguageClient.analyzeSentiment({document: document}).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n})\n.catch(function(err) {\n    console.error(err);\n});\n```\n\n\n## Cloud Pub/Sub (Beta)\n\n- [API Documentation][gcloud-pubsub-docs]\n- [Official Documentation][cloud-pubsub-docs]\n\n#### Using the Cloud Pub/Sub API module\n\n```\n$ npm install --save @google-cloud/pubsub\n```\n\n```js\nvar pubsub = require('@google-cloud/pubsub');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar pubsubClient = pubsub({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Reference a topic that has been previously created.\nvar topic = pubsubClient.topic('my-topic');\n\n// Publish a message to the topic.\nvar publisher = topic.publisher();\nvar message = new Buffer('New message!');\n\npublisher.publish(message, function(err, messageId) {});\n\n// Subscribe to the topic.\ntopic.createSubscription('subscription-name', function(err, subscription) {\n  // Register listeners to start pulling for messages.\n  function onError(err) {}\n  function onMessage(message) {}\n  subscription.on('error', onError);\n  subscription.on('message', onMessage);\n\n  // Remove listeners to stop pulling for messages.\n  subscription.removeListener('message', onMessage);\n  subscription.removeListener('error', onError);\n});\n```\n\n\n## Cloud Spanner (Beta)\n\n- [API Documentation][gcloud-spanner-docs]\n- [Official Documentation][cloud-spanner-docs]\n\n#### Using the Cloud Spanner API module\n\n```\n$ npm install --save @google-cloud/spanner\n```\n\n```js\nvar spanner = require('@google-cloud/spanner');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar spannerClient = spanner({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar instance = spannerClient.instance('my-instance');\nvar database = instance.database('my-database');\n\n// Create a table.\nvar schema = `\n  CREATE TABLE Singers (\n    SingerId INT64 NOT NULL,\n    FirstName STRING(1024),\n    LastName STRING(1024),\n    SingerInfo BYTES(MAX),\n  ) PRIMARY KEY(SingerId)\n`;\n\ndatabase.createTable(schema, function(err, table, operation) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  operation\n    .on('error', function(err) {})\n    .on('complete', function() {\n      // Table created successfully.\n    });\n});\n\n// Insert data into the table.\nvar table = database.table('Singers');\n\ntable.insert({\n  SingerId: 10,\n  FirstName: 'Eddie',\n  LastName: 'Wilson'\n}, function(err) {\n  if (!err) {\n    // Row inserted successfully.\n  }\n});\n\n// Run a query as a readable object stream.\ndatabase.runStream('SELECT * FROM Singers')\n  .on('error', function(err) {})\n  .on('data', function(row) {\n    // row.toJSON() = {\n    //   SingerId: 10,\n    //   FirstName: 'Eddie',\n    //   LastName: 'Wilson'\n    // }\n  }\n  })\n  .on('end', function() {\n    // All results retrieved.\n  });\n```\n\n\n## Cloud Vision (Beta)\n\n- [API Documentation][gcloud-vision-docs]\n- [Official Documentation][cloud-vision-docs]\n\n#### Using the Cloud Vision API module\n\n```\n$ npm install --save @google-cloud/vision\n```\n\n```js\nvar vision = require('@google-cloud/vision');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar visionClient = vision({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar gcsImageUri = 'gs://gapic-toolkit/President_Barack_Obama.jpg';\nvar source = {\n    gcsImageUri : gcsImageUri\n};\nvar image = {\n    source : source\n};\nvar type = vision.v1.types.Feature.Type.FACE_DETECTION;\nvar featuresElement = {\n    type : type\n};\nvar features = [featuresElement];\nvar requestsElement = {\n    image : image,\n    features : features\n};\nvar requests = [requestsElement];\nvisionClient.batchAnnotateImages({requests: requests}).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n})\n.catch(function(err) {\n    console.error(err);\n});\n```\n\n\n## Google BigQuery (Beta)\n\n- [API Documentation][gcloud-bigquery-docs]\n- [Official Documentation][cloud-bigquery-docs]\n\n\n#### Using the BigQuery API module\n\n```\n$ npm install --save @google-cloud/bigquery\n```\n\n```js\nvar bigquery = require('@google-cloud/bigquery');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar bigqueryClient = bigquery({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Access an existing dataset and table.\nvar schoolsDataset = bigqueryClient.dataset('schools');\nvar schoolsTable = schoolsDataset.table('schoolsData');\n\n// Import data into a table.\nschoolsTable.import('/local/file.json', function(err, job) {});\n\n// Get results from a query job.\nvar job = bigqueryClient.job('job-id');\n\n// Use a callback.\njob.getQueryResults(function(err, rows) {});\n\n// Or get the same results as a readable stream.\njob.getQueryResults().on('data', function(row) {});\n```\n\n\n## Google Stackdriver Monitoring (Beta)\n\n### :warning: This is an auto-generated API\n\nIt does not follow the conventions you're familiar with from other parts of our library. A handwritten layer is not yet available.\n\nThe example below shows you how to instantiate the generated client. For further documentation, please browse the [Monitoring .proto files][cloud-monitoring-protos] on GitHub.\n\n- [API Documentation][gcloud-monitoring-docs]\n- [Official Documentation][cloud-monitoring-docs]\n\n#### Using the Google Stackdriver Monitoring API module\n\n```\n$ npm install --save @google-cloud/monitoring\n```\n\n```js\nvar monitoring = require('@google-cloud/monitoring');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar client = monitoring.metric({\n    // optional auth parameters.\n});\n\n// Iterate over all elements.\nvar formattedName = client.projectPath(projectId);\n\nclient.listMonitoredResourceDescriptors({name: formattedName}).then(function(responses) {\n    var resources = responses[0];\n    for (var i = 0; i < resources.length; ++i) {\n        // doThingsWith(resources[i])\n    }\n})\n.catch(function(err) {\n    console.error(err);\n});\n\n// Or obtain the paged response.\nvar formattedName = client.projectPath(projectId);\n\n\nvar options = {autoPaginate: false};\nfunction callback(responses) {\n    // The actual resources in a response.\n    var resources = responses[0];\n    // The next request if the response shows there's more responses.\n    var nextRequest = responses[1];\n    // The actual response object, if necessary.\n    // var rawResponse = responses[2];\n    for (var i = 0; i < resources.length; ++i) {\n        // doThingsWith(resources[i]);\n    }\n    if (nextRequest) {\n        // Fetch the next page.\n        return client.listMonitoredResourceDescriptors(nextRequest, options).then(callback);\n    }\n}\nclient.listMonitoredResourceDescriptors({name: formattedName}, options)\n    .then(callback)\n    .catch(function(err) {\n        console.error(err);\n    });\n```\n\n\n## Cloud Bigtable (Alpha)\n\n- [API Documentation][gcloud-bigtable-docs]\n- [Official Documentation][cloud-bigtable-docs]\n\n*You may need to [create an instance][cloud-bigtable-instance] to use the Cloud Bigtable API with your project.*\n\n\n#### Using the Cloud Bigtable API module\n\n```\n$ npm install --save @google-cloud/bigtable\n```\n\n```js\nvar bigtable = require('@google-cloud/bigtable');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar bigtableClient = bigtable({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar instance = bigtableClient.instance('my-instance');\nvar table = instance.table('prezzy');\n\ntable.getRows(function(err, rows) {});\n\n// Update a row in your table.\nvar row = table.row('alincoln');\n\nrow.save('follows:gwashington', 1, function(err) {\n  if (err) {\n    // Error handling omitted.\n  }\n\n  row.get('follows:gwashington', function(err, data) {\n    if (err) {\n      // Error handling omitted.\n    }\n\n    // data = {\n    //   follows: {\n    //     gwashington: [\n    //       {\n    //         value: 1\n    //       }\n    //     ]\n    //   }\n    // }\n  });\n});\n```\n\n\n## Cloud DNS (Alpha)\n\n- [API Documentation][gcloud-dns-docs]\n- [Official Documentation][cloud-dns-docs]\n\n#### Using the Cloud DNS API module\n\n```\n$ npm install --save @google-cloud/dns\n```\n\n```js\nvar dns = require('@google-cloud/dns');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar dnsClient = dns({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Create a managed zone.\ndnsClient.createZone('my-new-zone', {\n  dnsName: 'my-domain.com.'\n}, function(err, zone) {});\n\n// Reference an existing zone.\nvar zone = dnsClient.zone('my-existing-zone');\n\n// Create an NS record.\nvar nsRecord = zone.record('ns', {\n  ttl: 86400,\n  name: 'my-domain.com.',\n  data: 'ns-cloud1.googledomains.com.'\n});\n\nzone.addRecords([nsRecord], function(err, change) {});\n\n// Create a zonefile from the records in your zone.\nzone.export('/zonefile.zone', function(err) {});\n```\n\n\n## Cloud Resource Manager (Alpha)\n\n- [API Documentation][gcloud-resource-docs]\n- [Official Documentation][cloud-resource-docs]\n\n#### Using the Cloud Resource Manager API module\n\n```\n$ npm install --save @google-cloud/resource\n```\n\n```js\nvar resource = require('@google-cloud/resource');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar resourceClient = resource({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Get all of the projects you maintain.\nresourceClient.getProjects(function(err, projects) {\n  if (!err) {\n    // `projects` contains all of your projects.\n  }\n});\n\n// Get the metadata from your project. (defaults to `grape-spaceship-123`)\nvar project = resourceClient.project();\n\nproject.getMetadata(function(err, metadata) {\n  // `metadata` describes your project.\n});\n```\n\n\n## Cloud Speech (Alpha)\n\n- [API Documentation][gcloud-speech-docs]\n- [Official Documentation][cloud-speech-docs]\n\n#### Using the Cloud Speech API module\n\n```\n$ npm install --save @google-cloud/speech\n```\n\n```js\nvar speech = require('@google-cloud/speech');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar speechClient = speech({\n  projectId: 'my-project',\n  keyFilename: '/path/to/keyfile.json'\n});\n\nvar languageCode = 'en-US';\nvar sampleRateHertz = 44100;\nvar encoding = speech.v1.types.RecognitionConfig.AudioEncoding.FLAC;\nvar config = {\n    languageCode : languageCode,\n    sampleRateHertz : sampleRateHertz,\n    encoding : encoding\n};\nvar uri = 'gs://gapic-toolkit/hello.flac';\nvar audio = {\n    uri : uri\n};\nvar request = {\n    config: config,\n    audio: audio\n};\nspeechClient.recognize(request).then(function(responses) {\n    var response = responses[0];\n    // doThingsWith(response)\n})\n.catch(function(err) {\n    console.error(err);\n});\n```\n\n\n## Google Compute Engine (Alpha)\n\n- [API Documentation][gcloud-compute-docs]\n- [Official Documentation][cloud-compute-docs]\n\n#### Using the Compute Engine API module\n\n```\n$ npm install --save @google-cloud/compute\n```\n\n```js\nvar compute = require('@google-cloud/compute');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar gce = compute({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Create a new VM using the latest OS image of your choice.\nvar zone = gce.zone('us-central1-a');\nvar name = 'ubuntu-http';\n\nzone.createVM(name, { os: 'ubuntu' }, function(err, vm, operation) {\n  // `operation` lets you check the status of long-running tasks.\n\n  operation\n    .on('error', function(err) {})\n    .on('running', function(metadata) {})\n    .on('complete', function(metadata) {\n      // Virtual machine created!\n    });\n});\n```\n\n\n## Google Prediction API (Alpha)\n\n- [API Documentation][gcloud-prediction-docs]\n- [Official Documentation][cloud-prediction-docs]\n\n#### Using the Prediction API module\n\n```\n$ npm install --save @google-cloud/prediction\n```\n\n```js\nvar prediction = require('@google-cloud/prediction');\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nvar predictionClient = prediction({\n  projectId: 'grape-spaceship-123',\n  keyFilename: '/path/to/keyfile.json'\n});\n\n// Get all of the trained models in your project.\npredictionClient.getModels(function(err, models) {\n  if (!err) {\n    // `models` is an array of Model objects.\n  }\n});\n\n// Reference an existing trained model.\nvar model = predictionClient.model('my-existing-model');\n\n// Train a model.\nmodel.train('english', 'Hello from your friends at Google!', function(err) {});\n\n// Query a model.\nmodel.query('Hello', function(err, results) {\n  if (!err) {\n    // results.winner == 'english'\n    // results.scores == [\n    //   {\n    //     label: 'english',\n    //     score: 1\n    //   },\n    //   {\n    //     label: 'spanish',\n    //     score: 0\n    //   }\n    // ]\n  }\n});\n```\n\n## Google Stackdriver Debugger (Alpha)\n\n- [GitHub Repo][stackdriver-debug-nodejs-repo]\n- [Official Documentation][stackdriver-debug-docs]\n\n*The source code for the Node.js Cloud Debugger Agent lives in a [separate repo][stackdriver-debug-nodejs-repo].*\n\n\n#### Using the Stackdriver Debug Agent module\n\n```\n$ npm install --save @google-cloud/debug-agent\n```\n\n```js\nrequire('@google-cloud/debug-agent').start({ allowExpressions: true });\n```\n\nFor more details on API usage, please see the [Stackdriver Debug Agent Github Repository][stackdriver-debug-nodejs-repo].\n\n\n## Google Stackdriver Error Reporting (Alpha)\n\n- [API Documentation][stackdriver-errors-module]\n- [Official Documentation][stackdriver-errors-docs]\n\n\n#### Using the Stackdriver Error Reporting module\n\n```\n$ npm install --save @google-cloud/error-reporting\n```\n\nThe module provides automatic [uncaught exception handling][stackdriver-errors-uncaught], [manual error reporting][stackdriver-errors-manual], and integration with common frameworks like [express][stackdriver-errors-express] and [hapi][stackdriver-errors-hapi].\n\n```js\nvar errors = require('@google-cloud/error-reporting')();\n```\n\n#### Authentication\n\nSee [Authentication](#authentication).\n\n#### Preview\n\n```js\nerrors.report(new Error('Something broke!'));\n```\n\nFor more details on API usage, please see the [documentation][stackdriver-errors-module].\n\n\n## Google Stackdriver Trace (Alpha)\n\n- [GitHub Repo][stackdriver-trace-nodejs-repo]\n- [Official Documentation][stackdriver-trace-docs]\n\n*The source code for the Node.js Cloud Trace Agent lives in a [separate repo][stackdriver-trace-nodejs-repo].*\n\n\n#### Using the Stackdriver Trace Agent module\n\n```\n$ npm install --save @google-cloud/trace-agent\n```\n\n```js\nvar trace = require('@google-cloud/trace-agent').start();\n```\n\nFor more details on API usage, please see the [Stackdriver Trace Agent Github Repository][stackdriver-trace-nodejs-repo].\n\n\n## Versioning\n\nThis library follows [Semantic Versioning][semver].\n\nPlease note it is currently under active development. Any release versioned `0.x.y` is subject to backwards-incompatible changes at any time.\n\n**GA**: Libraries defined at the GA (general availability) quality level are stable. The code surface will not change in backwards-incompatible ways unless absolutely necessary (e.g. because of critical security issues) or with an extensive deprecation period. Issues and requests against GA libraries are addressed with the highest priority.\n\nPlease note that the auto-generated portions of the GA libraries (the ones in modules such as `v1` or `v2`) are considered to be of **Beta** quality, even if the libraries that wrap them are GA.\n\n**Beta**: Libraries defined at the Beta quality level are expected to be mostly stable, while we work towards their release candidate. We will address issues and requests with a higher priority.\n\n**Alpha**: Libraries defined at the Alpha quality level are still a work-in-progress and are more likely to get backwards-incompatible updates.\n\n\n## Contributing\n\nContributions to this library are always welcome and highly encouraged.\n\nSee [CONTRIBUTING][contributing] for more information on how to get started.\n\n\n## License\n\nApache 2.0 - See [LICENSE][license] for more information.\n\n\n[gcloud-homepage]: https://googlecloudplatform.github.io/google-cloud-node/\n[gcloud-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs\n[gcloud-bigquery-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/bigquery\n[gcloud-bigtable-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/bigtable\n[gcloud-compute-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/compute\n[gcloud-datastore-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/datastore\n[gcloud-firestore-docs]: https://cloud.google.com/nodejs/docs/reference/firestore/latest\n[gcloud-dns-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/dns\n[gcloud-language-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/language\n[gcloud-logging-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/logging\n[gcloud-prediction-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/prediction\n[gcloud-monitoring-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/monitoring\n[gcloud-pubsub-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/pubsub\n[gcloud-resource-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/resource\n[gcloud-spanner-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/spanner\n[gcloud-speech-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/speech\n[gcloud-storage-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/storage\n[gcloud-translate-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/translate\n[gcloud-vision-docs]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/vision\n\n[nodejs-getting-started]: https://github.com/GoogleCloudPlatform/nodejs-getting-started\n[nodejs-getting-started-tutorial]: https://cloud.google.com/nodejs/getting-started/hello-world\n[gcloud-todos]: https://github.com/GoogleCloudPlatform/gcloud-node-todos\n[gitnpm]: https://github.com/stephenplusplus/gitnpm\n[gcloud-kvstore]: https://github.com/stephenplusplus/gcloud-kvstore\n[hya-wave]: https://wav.hya.io\n[hya-io]: https://hya.io\n[gstore-node]: https://github.com/sebelga/gstore-node\n[gstore-api]: https://github.com/sebelga/gstore-api\n\n[dev-console]: https://console.developers.google.com/project\n[gce-how-to]: https://cloud.google.com/compute/docs/authentication#using\n[api-key-howto]: https://cloud.google.com/translate/v2/using_rest#auth\n\n[googleapis]: https://github.com/google/google-api-nodejs-client\n\n[cloud-bigquery-docs]: https://cloud.google.com/bigquery/what-is-bigquery\n\n[cloud-bigtable-docs]: https://cloud.google.com/bigtable/docs\n[cloud-bigtable-instance]: https://cloud.google.com/bigtable/docs/creating-instance\n\n[cloud-compute-docs]: https://cloud.google.com/compute/docs\n\n[cloud-datastore-docs]: https://cloud.google.com/datastore/docs\n[cloud-datastore-activation]: https://cloud.google.com/datastore/docs/activate\n\n[cloud-dns-docs]: https://cloud.google.com/dns/docs\n\n[cloud-firestore-docs]: https://firebase.google.com/docs/firestore\n\n[cloud-language-docs]: https://cloud.google.com/natural-language/docs\n\n[cloud-monitoring-docs]: https://cloud.google.com/monitoring/docs\n[cloud-monitoring-protos]: https://github.com/googleapis/googleapis/tree/master/google/monitoring/v3\n\n[cloud-logging-docs]: https://cloud.google.com/logging/docs\n\n[cloud-prediction-docs]: https://cloud.google.com/prediction/docs\n\n[cloud-pubsub-docs]: https://cloud.google.com/pubsub/docs\n\n[cloud-resource-docs]: https://cloud.google.com/resource-manager\n\n[cloud-spanner-docs]: https://cloud.google.com/spanner\n\n[cloud-storage-docs]: https://cloud.google.com/storage/docs/overview\n\n[cloud-translate-docs]: https://cloud.google.com/translate/docs\n\n[cloud-speech-docs]: https://cloud.google.com/speech/docs\n\n[cloud-vision-docs]: https://cloud.google.com/vision/docs\n\n[semver]: http://semver.org\n\n[stackdriver-debug-nodejs-repo]: https://github.com/GoogleCloudPlatform/cloud-debug-nodejs\n[stackdriver-debug-docs]: https://cloud.google.com/debugger/docs/\n[stackdriver-trace-nodejs-repo]: https://github.com/GoogleCloudPlatform/cloud-trace-nodejs\n[stackdriver-trace-docs]: https://cloud.google.com/trace/docs/\n[stackdriver-errors-docs]: https://cloud.google.com/error-reporting/docs/\n[stackdriver-errors-uncaught]:  https://github.com/GoogleCloudPlatform/google-cloud-node/tree/master/packages/error-reporting#catching-and-reporting-application-wide-uncaught-errors\n[stackdriver-errors-manual]: https://github.com/GoogleCloudPlatform/google-cloud-node/tree/master/packages/error-reporting#reporting-manually\n[stackdriver-errors-express]: https://github.com/GoogleCloudPlatform/google-cloud-node/tree/master/packages/error-reporting#using-express\n[stackdriver-errors-hapi]: https://github.com/GoogleCloudPlatform/google-cloud-node/tree/master/packages/error-reporting#using-hapi\n[stackdriver-errors-module]: https://github.com/GoogleCloudPlatform/google-cloud-node/tree/master/packages/error-reporting\n\n[contributing]: .github/CONTRIBUTING.md\n\n[license]: LICENSE\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/googlecloudplatform/google-cloud-node.git"
  },
  "scripts": {
    "publish-module": "node ../../scripts/publish.js google-cloud",
    "test": "mocha test/*.js"
  },
  "version": "0.57.0"
}
